#!/usr/bin/env python
# Copyright (C) 2015 Swift Navigation Inc.
# Contact: Fergus Noble <fergus@swiftnav.com>
#
# This source is subject to the license found in the file 'LICENSE' which must
# be be distributed together with this source. All other rights reserved.
#
# THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.


"""
(((description)))
"""

from construct import *
import json
from sbp.msg import SBP, SENDER_ID, TYPES_NP, TYPES_KEYS_NP
from sbp.utils import fmt_repr, exclude_fields, walk_json_dict, containerize,\
                      greedy_string
import numpy as np
import traceback

((*- for i in include *))
from (((module_path))).(((i))) import *
((*- endfor *))

# Automatically generated from piksi/yaml/(((filepath))) with generate.py.
# Please do not hand edit!

((* for m in msgs *))
  ((*- if m.static *))
    ((*- if not m.sbp_id *))
class ((( m.identifier )))(object):
  """(((m.identifier))).
  ((* if m.desc *))
  (((m.desc)))
  ((*- endif *))
  ((* if m.fields *))
  Parameters
  ----------
  ((*- for f in m.fields *))
  (((f.identifier))) : (((f.type_id|pydoc)))
  ((*- if f.desc *))
    (((f.desc)))
  ((*- endif *))
  ((*- endfor *))
  ((*- endif *))

  """
  ((*- if m.fields *))
  _parser = Embedded(Struct("(((m.identifier )))",
                     ((*- for f in m.fields *))
                     ((( f | construct_py ))),
                     ((*- endfor *))))
  __slots__ = [((* for f in m.fields *))
               '((( f.identifier )))',
               ((*- endfor *))
              ]
  _fields = [((* for f in m.fields *))
             ( '((( f.type_id )))', '((( f.identifier )))' ),
             ((*- endfor *))
            ]
  ((*- endif *))

  def __repr__(self):
    return fmt_repr(self)

  def __getitem__(self, item):
    return getattr(self, item)

  ((* if m.fields *))
  def from_binary(self, data, offset=0):
    size = 0
    for field_type, field_name in ((( m.identifier )))._fields:
      if field_type in TYPES_KEYS_NP:
        parsed = np.ndarray(1, TYPES_NP[field_type], data, size + offset)
        size += parsed.itemsize
        setattr(self, field_name, parsed.item())
      else:
        obj = globals()[field_type]()
        size += obj.from_binary(data, size + offset)
        setattr(self, field_name, obj)
    return size

  def to_binary(self):
    d = dict([(k, getattr(obj, k)) for k in self.__slots__])
    return ((( m.identifier ))).build(d)
  ((*- endif *))
    ((* endif *))
  ((*- endif *))
((*- endfor *))

((*- for m in msgs *))
  ((*- if m.static *))
    ((*- if m.sbp_id *))
SBP_(((m.identifier))) = ((('0x%04X'|format(m.sbp_id))))
class ((( m.identifier | classnameify )))(SBP):
  """SBP class for message (((m.identifier))) ((('(0x%04X)'|format(m.sbp_id)))).

  You can have (((m.identifier))) inherit its fields directly
  from an inherited SBP object, or construct it inline using a dict
  of its fields.

  ((* if m.desc *))
  (((m.desc)))
  ((*- endif *))

  ((*- if m.fields*))

  Parameters
  ----------
  sbp : SBP
    SBP parent object to inherit from.
  ((*- for f in m.fields *))
  (((f.identifier))) : (((f.type_id|pydoc)))
  ((*- if f.desc *))
    (((f.desc)))
  ((*- endif *))
  ((*- endfor *))
  sender : int
    Optional sender ID, defaults to SENDER_ID (see sbp/msg.py).
  ((*- endif *))

  """
  ((*- if m.fields *))
  _parser = Struct("(((m.identifier | classnameify )))",
                   ((*- for f in m.fields *))
                   ((( f | construct_py ))),
                   ((*- endfor *)))
  __slots__ = [((* for f in m.fields *))
               '((( f.identifier )))',
               ((*- endfor *))
              ]
  _fields = [((* for f in m.fields *))
             ( ((( f | construct_py_np ))), '((( f.identifier )))' ),
             ((*- endfor *))
            ]
  ((*- else *))
  __slots__ = []
  _fields = []
  ((*- endif *))

  def __init__(self, sbp=None, **kwargs):
    if sbp:
      super( ((( m.identifier | classnameify ))),
             self).__init__(sbp.msg_type, sbp.sender, sbp.length,
                            sbp.payload, sbp.crc)
      ((*- if m.fields *))
      self.from_binary(sbp.payload)
      ((*- else *))
      self.payload = sbp.payload
      ((*- endif *))
    else:
      super( ((( m.identifier | classnameify ))), self).__init__()
      self.msg_type = SBP_(((m.identifier)))
      self.sender = kwargs.pop('sender', SENDER_ID)
    ((*- if m.fields*))
      ((*- for f in m.fields *))
      self.(((f.identifier))) = kwargs.pop('(((f.identifier)))')
      ((*- endfor *))
    ((*- else *))
      self.payload = ""
    ((*- endif *))

  def __repr__(self):
    return fmt_repr(self)

  @staticmethod
  def from_json(s):
    """Given a JSON-encoded string s, build a message object.

    """
    d = json.loads(s)
    return ((( m.identifier | classnameify ))).from_json_dict(d)

  @staticmethod
  def from_json_dict(d):
    sbp = SBP.from_json_dict(d)
    return ((( m.identifier | classnameify )))(sbp, **d)

 ((* if m.fields *))
  def from_binary(self, d):
    """Given a binary payload d, update the appropriate payload fields of
    the message.

    """
    self._from_binary(d)

  def __getitem__(self, item):
    return getattr(self, item)

  def _get_embedded_type(self, t):
    return globals()[t]

  def to_binary(self):
    """Produce a framed/packed SBP message.

    """
    c = containerize(exclude_fields(self))
    self.payload = ((( m.identifier | classnameify )))._parser.build(c)
    return self.pack()

  def to_json_dict(self):
    self.to_binary()
    d = super( ((( m.identifier | classnameify ))), self).to_json_dict()
    j = walk_json_dict(exclude_fields(self))
    d.update(j)
    return d
    ((*- endif *))
    ((* endif *))
  ((*- else *))
  ((*- endif *))

((*- endfor *))

msg_classes = {
((*- for m in msgs *))
  ((*- if m.sbp_id *))
  ((('0x%04X'|format(m.sbp_id)))): ((( m.identifier | classnameify ))),
  ((*- endif*))
((*- endfor *))
}
